import { ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, Optional, Renderer2 } from '@angular/core';
import { from, of } from 'rxjs';
import { NavigationEnd, Router } from '@angular/router';
import { containsTree } from './private-imports/router-url-tree';
import { NSRouterLink } from './ns-router-link';
import { mergeAll } from 'rxjs/operators';
/**
 * The NSRouterLinkActive directive lets you add a CSS class to an element when the link"s route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link">Bob</a>
 * ```
 *
 * When the url is either "/user" or "/user/bob", the active-link class will
 * be added to the component. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="class1 class2">Bob</a>
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="["class1", "class2"]">Bob</a>
 * ```
 *
 * You can configure NSRouterLinkActive by passing `exact: true`. This will add the
 * classes only when the url matches the link exactly.
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link"
 * [nsRouterLinkActiveOptions]="{exact: true}">Bob</a>
 * ```
 *
 * Finally, you can apply the NSRouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div [nsRouterLinkActive]="active-link" [nsRouterLinkActiveOptions]="{exact: true}">
 *   <a [nsRouterLink]="/user/jim">Jim</a>
 *   <a [nsRouterLink]="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either "/user/jim" or
 * "/user/bob".
 *
 * @stable
 */
export class NSRouterLinkActive {
    constructor(router, element, renderer, cdr, link) {
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.cdr = cdr;
        this.link = link;
        this.classes = [];
        this.active = false;
        this.nsRouterLinkActiveOptions = { exact: false };
        this.routerEventsSubscription = router.events.subscribe((s) => {
            if (s instanceof NavigationEnd) {
                this.update();
            }
        });
    }
    get isActive() {
        return this.active;
    }
    ngAfterContentInit() {
        // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).
        from([this.links.changes, of(null)])
            .pipe(mergeAll())
            .subscribe((_) => {
            this.update();
            this.subscribeToEachLinkOnChanges();
        });
    }
    subscribeToEachLinkOnChanges() {
        var _a;
        (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
        this.linkInputChangesSubscription = from(allLinkChanges)
            .pipe(mergeAll())
            .subscribe((link) => {
            if (this.isActive !== this.isLinkActive(this.router)(link)) {
                this.update();
            }
        });
    }
    set nsRouterLinkActive(data) {
        if (Array.isArray(data)) {
            this.classes = data;
        }
        else {
            this.classes = data.split(' ');
        }
    }
    ngOnChanges(_) {
        this.update();
    }
    ngOnDestroy() {
        var _a;
        this.routerEventsSubscription.unsubscribe();
        (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    update() {
        if (!this.links) {
            return;
        }
        Promise.resolve().then(() => {
            const hasActiveLinks = this.hasActiveLinks();
            if (this.active !== hasActiveLinks) {
                this.active = hasActiveLinks;
                const currentUrlTree = this.router.parseUrl(this.router.url);
                const links = this.link ? [...this.links.toArray(), this.link] : this.links;
                const isActiveLinks = this.reduceList(currentUrlTree, links);
                this.cdr.markForCheck();
                this.classes.forEach((c) => {
                    if (isActiveLinks) {
                        this.renderer.addClass(this.element.nativeElement, c);
                    }
                    else {
                        this.renderer.removeClass(this.element.nativeElement, c);
                    }
                });
            }
        });
    }
    reduceList(currentUrlTree, q) {
        return q.reduce((res, link) => {
            return res || containsTree(currentUrlTree, link.urlTree, this.nsRouterLinkActiveOptions.exact);
        }, false);
    }
    isLinkActive(router) {
        return (link) => router.isActive(link.urlTree, this.nsRouterLinkActiveOptions.exact);
    }
    hasActiveLinks() {
        const isActiveCheckFn = this.isLinkActive(this.router);
        return (this.link && isActiveCheckFn(this.link)) || this.links.some(isActiveCheckFn);
    }
}
NSRouterLinkActive.decorators = [
    { type: Directive, args: [{
                selector: '[nsRouterLinkActive]',
                exportAs: 'routerLinkActive',
            },] }
];
NSRouterLinkActive.ctorParameters = () => [
    { type: Router },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: NSRouterLink, decorators: [{ type: Optional }] }
];
NSRouterLinkActive.propDecorators = {
    links: [{ type: ContentChildren, args: [NSRouterLink, { descendants: true },] }],
    nsRouterLinkActiveOptions: [{ type: Input }],
    nsRouterLinkActive: [{ type: Input, args: ['nsRouterLinkActive',] }]
};
//# sourceMappingURL=data:application/json;base64,