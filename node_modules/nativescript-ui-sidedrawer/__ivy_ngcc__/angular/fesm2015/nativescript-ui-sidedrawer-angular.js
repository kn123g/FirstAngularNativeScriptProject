import { EventEmitter, Component, ElementRef, Inject, ViewContainerRef, Output, Input, Directive, NgModule } from '@angular/core';
import { registerElement } from '@nativescript/angular';
import { RadSideDrawer } from 'nativescript-ui-sidedrawer';

/// <reference path="references.d.ts" />
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
const TKDRAWERCONTENT = "TKDrawerContent";
const TKMAINCONTENT = "TKMainContent";
/**
* This is the SideDrawer component. It separates your mobile app's screen
* into a main part and a menu part whereby the menu part is shown upon a swipe
* gesture using a transition effect.
*/
class RadSideDrawerComponent {
    constructor(elementRef, viewContainer) {
        this.elementRef = elementRef;
        this.viewContainer = viewContainer;
        this.drawerOpening = new EventEmitter();
        this.drawerOpen = new EventEmitter();
        this.drawerClosing = new EventEmitter();
        this.drawerClosed = new EventEmitter();
        this.sideDrawer = this.elementRef.nativeElement;
    }
    /**
      * [Deprecated: Please use the 'drawerTransition' property instead].
      */
    set transition(transition) {
        this.sideDrawer.drawerTransition = transition;
    }
    get nativeElement() {
        return this.sideDrawer;
    }
    /**
      * Defines either the width or the height
      * of the menu pane depending on the location of the SideDrawer.
      * Top or Bottom - height, Right or Left - width.
      */
    set drawerContentSize(value) {
        this._drawerContentSize = value;
        this.updateContentSize();
    }
    set gesturesEnabled(value) {
        this._gesturesEnabled = value;
        this.updateGesturesEnabled();
    }
    set drawerTransition(value) {
        this._drawerTransition = value;
        this.updateDrawerTransition();
    }
    set drawerLocation(value) {
        this._drawerLocation = value;
        this.updateDrawerLocation();
    }
    updateDrawerLocation() {
        this.sideDrawer.drawerLocation = this._drawerLocation;
    }
    updateDrawerTransition() {
        this.sideDrawer.drawerTransition = this._drawerTransition;
    }
    updateGesturesEnabled() {
        this.sideDrawer.gesturesEnabled = this._gesturesEnabled;
    }
    updateContentSize() {
        this.sideDrawer.drawerContentSize = this._drawerContentSize;
    }
}
RadSideDrawerComponent.ɵfac = function RadSideDrawerComponent_Factory(t) { return new (t || RadSideDrawerComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef)); };
RadSideDrawerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: RadSideDrawerComponent, selectors: [["RadSideDrawer"]], inputs: { transition: "transition" }, outputs: { drawerOpening: "drawerOpening", drawerOpen: "drawerOpen", drawerClosing: "drawerClosing", drawerClosed: "drawerClosed" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function RadSideDrawerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
RadSideDrawerComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] }
];
RadSideDrawerComponent.propDecorators = {
    drawerOpening: [{ type: Output }],
    drawerOpen: [{ type: Output }],
    drawerClosing: [{ type: Output }],
    drawerClosed: [{ type: Output }],
    transition: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadSideDrawerComponent, [{
        type: Component,
        args: [{
                selector: 'RadSideDrawer',
                template: "<ng-content></ng-content>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: ɵngcc0.ViewContainerRef, decorators: [{
                type: Inject,
                args: [ViewContainerRef]
            }] }]; }, { drawerOpening: [{
            type: Output
        }], drawerOpen: [{
            type: Output
        }], drawerClosing: [{
            type: Output
        }], drawerClosed: [{
            type: Output
        }], transition: [{
            type: Input
        }] }); })();
/**
 * Directive identifying the drawer content.
 */
class TKDrawerContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKDRAWERCONTENT;
    }
}
TKDrawerContentDirective.ɵfac = function TKDrawerContentDirective_Factory(t) { return new (t || TKDrawerContentDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
TKDrawerContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TKDrawerContentDirective, selectors: [["", "tkDrawerContent", ""]] });
TKDrawerContentDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TKDrawerContentDirective, [{
        type: Directive,
        args: [{
                selector: "[tkDrawerContent]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }]; }, null); })();
/**
 * Directive identifying the main content.
 */
class TKMainContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKMAINCONTENT;
    }
}
TKMainContentDirective.ɵfac = function TKMainContentDirective_Factory(t) { return new (t || TKMainContentDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
TKMainContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TKMainContentDirective, selectors: [["", "tkMainContent", ""]] });
TKMainContentDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TKMainContentDirective, [{
        type: Directive,
        args: [{
                selector: "[tkMainContent]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }]; }, null); })();
const ɵ0 = (parent, child) => {
    const drawer = parent;
    const childView = child;
    if (childView.id === TKMAINCONTENT) {
        drawer.mainContent = childView;
    }
    if (childView.id === TKDRAWERCONTENT) {
        drawer.drawerContent = childView;
    }
}, ɵ1 = (parent, child) => {
    const drawer = parent;
    const childView = child;
    if (childView.id === TKMAINCONTENT) {
        drawer.mainContent = null;
    }
    if (childView.id === TKDRAWERCONTENT) {
        drawer.drawerContent = null;
    }
};
let sideDrawerMeta = {
    insertChild: ɵ0,
    removeChild: ɵ1,
};
/**
 * Directives identifying the RadSideDrawer.
 */
const SIDEDRAWER_DIRECTIVES = [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective];
registerElement("RadSideDrawer", () => RadSideDrawer, sideDrawerMeta);
/**
 * NgModule containing all of the RadSideDrawer directives.
 */
class NativeScriptUISideDrawerModule {
}
NativeScriptUISideDrawerModule.ɵfac = function NativeScriptUISideDrawerModule_Factory(t) { return new (t || NativeScriptUISideDrawerModule)(); };
NativeScriptUISideDrawerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NativeScriptUISideDrawerModule });
NativeScriptUISideDrawerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeScriptUISideDrawerModule, { declarations: [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective], exports: [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NativeScriptUISideDrawerModule, [{
        type: NgModule,
        args: [{
                declarations: [SIDEDRAWER_DIRECTIVES],
                exports: [SIDEDRAWER_DIRECTIVES]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NativeScriptUISideDrawerModule, RadSideDrawerComponent, SIDEDRAWER_DIRECTIVES, TKDrawerContentDirective, TKMainContentDirective, ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,