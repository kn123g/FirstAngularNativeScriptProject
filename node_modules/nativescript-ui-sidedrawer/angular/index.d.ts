/// <reference path="../references.d.ts" />
import { ElementRef, TemplateRef, EmbeddedViewRef, ViewContainerRef, EventEmitter } from "@angular/core";
import { RadSideDrawer } from "nativescript-ui-sidedrawer";
import * as ɵngcc0 from '@angular/core';
export interface ItemEventArgs {
    object: any;
    view: EmbeddedViewRef<any>;
    returnValue?: boolean;
}
/**
* This is the SideDrawer component. It separates your mobile app's screen
* into a main part and a menu part whereby the menu part is shown upon a swipe
* gesture using a transition effect.
*/
export declare class RadSideDrawerComponent {
    elementRef: ElementRef;
    private viewContainer;
    sideDrawer: RadSideDrawer;
    mainTemplate: TemplateRef<ElementRef>;
    drawerTemplate: TemplateRef<ElementRef>;
    private _drawerContentSize;
    private _gesturesEnabled;
    private _drawerTransition;
    private _drawerLocation;
    drawerOpening: EventEmitter<any>;
    drawerOpen: EventEmitter<any>;
    drawerClosing: EventEmitter<any>;
    drawerClosed: EventEmitter<any>;
    /**
      * [Deprecated: Please use the 'drawerTransition' property instead].
      */
    set transition(transition: any);
    constructor(elementRef: ElementRef, viewContainer: ViewContainerRef);
    get nativeElement(): RadSideDrawer;
    /**
      * Defines either the width or the height
      * of the menu pane depending on the location of the SideDrawer.
      * Top or Bottom - height, Right or Left - width.
      */
    set drawerContentSize(value: number);
    set gesturesEnabled(value: boolean);
    set drawerTransition(value: string);
    set drawerLocation(value: string);
    private updateDrawerLocation;
    private updateDrawerTransition;
    private updateGesturesEnabled;
    private updateContentSize;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RadSideDrawerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RadSideDrawerComponent, "RadSideDrawer", never, { "transition": "transition"; }, { "drawerOpening": "drawerOpening"; "drawerOpen": "drawerOpen"; "drawerClosing": "drawerClosing"; "drawerClosed": "drawerClosed"; }, never, ["*"]>;
}
/**
 * Directive identifying the drawer content.
 */
export declare class TKDrawerContentDirective {
    private _elementRef;
    constructor(_elementRef: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TKDrawerContentDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TKDrawerContentDirective, "[tkDrawerContent]", never, {}, {}, never>;
}
/**
 * Directive identifying the main content.
 */
export declare class TKMainContentDirective {
    private _elementRef;
    constructor(_elementRef: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TKMainContentDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TKMainContentDirective, "[tkMainContent]", never, {}, {}, never>;
}
/**
 * Directives identifying the RadSideDrawer.
 */
export declare const SIDEDRAWER_DIRECTIVES: (typeof RadSideDrawerComponent | typeof TKDrawerContentDirective | typeof TKMainContentDirective)[];
/**
 * NgModule containing all of the RadSideDrawer directives.
 */
export declare class NativeScriptUISideDrawerModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NativeScriptUISideDrawerModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NativeScriptUISideDrawerModule, [typeof RadSideDrawerComponent, typeof TKDrawerContentDirective, typeof TKMainContentDirective], never, [typeof RadSideDrawerComponent, typeof TKDrawerContentDirective, typeof TKMainContentDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NativeScriptUISideDrawerModule>;
}

//# sourceMappingURL=index.d.ts.map